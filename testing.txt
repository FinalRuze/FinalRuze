$source= @"
using System;
using System.Runtime.InteropServices;
using System.Threading;

public static class Win32
{
    [DllImport("user32.dll")]
    static extern int GetSystemMetrics(int smIndex);

    [DllImport("user32.dll")]
    static extern IntPtr GetDC(IntPtr hWnd);

    [DllImport("gdi32.dll")]
    static extern bool StretchBlt(IntPtr hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, IntPtr hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, int dwRop);

    [DllImport("gdi32.dll")]
    static extern IntPtr CreateCompatibleDC(IntPtr hdc);

    [DllImport("gdi32.dll")]
    static extern IntPtr CreateCompatibleBitmap(IntPtr hdc, int nWidth, int nHeight);

    [DllImport("gdi32.dll")]
    static extern IntPtr SelectObject(IntPtr hdc, IntPtr hObject);

    [DllImport("gdi32.dll")]
    static extern bool PatBlt(IntPtr hdc, int nXLeft, int nYLeft, int nWidth, int nHeight, uint dwRop);

    [DllImport("gdi32.dll")]
    static extern bool DeleteObject(IntPtr hObject);

    [DllImport("user32.dll", SetLastError = true)]
    static extern bool SetProcessDPIAware();

    public static void PIP()
    {
        SetProcessDPIAware();
        int cx = GetSystemMetrics(0);
        int cy = GetSystemMetrics(1);

        IntPtr hdc = GetDC(IntPtr.Zero);
        IntPtr hdcCompatible = CreateCompatibleDC(hdc);
        IntPtr hBitmap = CreateCompatibleBitmap(hdc, cx, cy);
        IntPtr hOldBitmap = SelectObject(hdcCompatible, hBitmap);

        int bleedRop = 0x00220326; // BLENDSCREEN
        int sleepInterval = 50;
        int bleedAlpha = 5;

        while (true)
        {
            Thread.Sleep(sleepInterval);

            PatBlt(hdcCompatible, 0, 0, cx, cy, bleedRop);
            StretchBlt(hdc, 0, 0, cx, cy, hdcCompatible, 0, 0, cx, cy, 0x00CC0020);

            if (bleedAlpha < 255)
            {
                uint alphaBlendRop = (uint)((bleedAlpha << 24) | (bleedAlpha << 16) | (bleedAlpha << 8) | bleedAlpha);
                PatBlt(hdcCompatible, 0, 0, cx, cy, alphaBlendRop);
                StretchBlt(hdc, 0, 0, cx, cy, hdcCompatible, 0, 0, cx, cy, 0x00CC0020);
                bleedAlpha += 5;
            }
        }

        SelectObject(hdcCompatible, hOldBitmap);
        DeleteObject(hBitmap);
        DeleteObject(hdcCompatible);
    }
}
"@

Add-Type -TypeDefinition $source -Language CSharp
[Win32]::PIP()
