$source = @"
using System;
using System.Runtime.InteropServices;
using System.Threading;

public static class Win32
{
    [DllImport("user32.dll")]
    static extern int GetSystemMetrics(int smIndex);

    [DllImport("user32.dll")]
    static extern IntPtr GetDC(IntPtr hWnd);

    [DllImport("gdi32.dll")]
    static extern bool StretchBlt(IntPtr hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, IntPtr hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, int dwRop);

    [DllImport("user32.dll", SetLastError = true)]
    static extern bool SetProcessDPIAware();

    [DllImport("gdi32.dll")]
    static extern IntPtr CreateSolidBrush(uint crColor);

    [DllImport("gdi32.dll")]
    static extern IntPtr SelectObject(IntPtr hdc, IntPtr hgdiobj);

    [DllImport("gdi32.dll")]
    static extern bool PatBlt(IntPtr hdc, int nXLeft, int nYLeft, int nWidth, int nHeight, uint dwRop);

    [DllImport("gdi32.dll")]
    static extern bool DeleteObject(IntPtr hObject);

    public static void BlackOutScreen()
    {
        SetProcessDPIAware();
        int cx = GetSystemMetrics(0);
        int cy = GetSystemMetrics(1);
        uint black = 0x000000;

        IntPtr hdc = GetDC(IntPtr.Zero);
        IntPtr brush = CreateSolidBrush(black);
        IntPtr oldBrush = SelectObject(hdc, brush);

        while (true)
        {
            for (int alpha = 0; alpha <= 255; alpha += 5)
            {
                Thread.Sleep(20);
                PatBlt(hdc, 0, 0, cx, cy, 0x000F0000 | (uint)((alpha + 1) << 24));
            }
        }

        DeleteObject(SelectObject(hdc, oldBrush));
    }
}
"@

Add-Type -TypeDefinition $source -Language CSharp
[Win32]::BlackOutScreen()
