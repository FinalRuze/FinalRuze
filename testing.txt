$source = @"
using System;
using System.Runtime.InteropServices;
using System.Threading;

public static class Win32
{
    [DllImport("user32.dll")]
    static extern int GetSystemMetrics(int smIndex);

    [DllImport("user32.dll")]
    static extern IntPtr GetDC(IntPtr hWnd);

    [DllImport("gdi32.dll")]
    static extern bool StretchBlt(IntPtr hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, IntPtr hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, int dwRop);

    [DllImport("user32.dll", SetLastError = true)]
    static extern bool SetProcessDPIAware();

    public static void ReversePIP()
    {
        SetProcessDPIAware();
        int cx = GetSystemMetrics(0);
        int cy = GetSystemMetrics(1);

        while (true)
        {
            Thread.Sleep(800);
            IntPtr hdc = GetDC(IntPtr.Zero);

            // StretchBlt for Reverse PIP
            //StretchBlt(hdc, 0, 0, cx, cy, hdc, 50, 50, cx - 100, cy - 100, 0x00CC0020);

            // TransparentBlt for Transparency
            //TransparentBlt(hdc, 0, 0, cx, cy, hdc, 0, 0, cx, cy, 0xFF0000);

            // Custom Graphic Effect: Blur
            int blurRadius = 5;

            for (int x = 0; x < cx - 100; x++)
            {
                for (int y = 0; y < cy - 100; y++)
                {
                    int startX = Math.Max(x - blurRadius, 0);
                    int startY = Math.Max(y - blurRadius, 0);
                    int endX = Math.Min(x + blurRadius, cx - 100);
                    int endY = Math.Min(y + blurRadius, cy - 100);

                    int sumRed = 0;
                    int sumGreen = 0;
                    int sumBlue = 0;
                    int pixelCount = 0;

                    for (int px = startX; px <= endX; px++)
                    {
                        for (int py = startY; py <= endY; py++)
                        {
                            int pixelIndex = (px + py * (cx - 100)) * 4;

                            byte blue = Marshal.ReadByte(hdc, pixelIndex);
                            byte green = Marshal.ReadByte(hdc, pixelIndex + 1);
                            byte red = Marshal.ReadByte(hdc, pixelIndex + 2);

                            sumRed += red;
                            sumGreen += green;
                            sumBlue += blue;
                            pixelCount++;
                        }
                    }

                    byte averageRed = (byte)(sumRed / pixelCount);
                    byte averageGreen = (byte)(sumGreen / pixelCount);
                    byte averageBlue = (byte)(sumBlue / pixelCount);

                    int destPixelIndex = (x + y * (cx - 100)) * 4;
                    Marshal.WriteByte(hdc, destPixelIndex, averageBlue);
                    Marshal.WriteByte(hdc, destPixelIndex + 1, averageGreen);
                    Marshal.WriteByte(hdc, destPixelIndex + 2, averageRed);
                }
            }
        }
    }
}
"@

Add-Type -TypeDefinition $source -Language CSharp
[Win32]::ReversePIP()
