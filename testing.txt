Add-Type -TypeDefinition @'
using System;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;

public static class Win32
{
    [DllImport("user32.dll")]
    public static extern IntPtr GetDC(IntPtr hWnd);

    [DllImport("user32.dll")]
    public static extern bool ReleaseDC(IntPtr hWnd, IntPtr hDC);

    [DllImport("gdi32.dll")]
    public static extern bool BitBlt(IntPtr hdcDest, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hdcSrc, int nXSrc, int nYSrc, uint dwRop);

    [DllImport("user32.dll")]
    public static extern int GetSystemMetrics(int smIndex);

    [DllImport("user32.dll", SetLastError = true)]
    public static extern bool SetProcessDPIAware();

    public static void FadeToBlack()
    {
        SetProcessDPIAware();
        int screenWidth = GetSystemMetrics(0);
        int screenHeight = GetSystemMetrics(1);

        Bitmap blackBitmap = new Bitmap(screenWidth, screenHeight);
        Graphics graphics = Graphics.FromImage(blackBitmap);

        Color startColor = Color.FromArgb(255, 0, 0, 0); // Start with black
        Color endColor = Color.FromArgb(0, 0, 0, 0); // End with transparent

        int steps = 100; // Number of steps for fading
        int delay = 100; // Delay between steps in milliseconds

        for (int step = 0; step <= steps; step++)
        {
            float blend = (float)step / steps;
            Color blendedColor = BlendColors(startColor, endColor, blend);

            graphics.Clear(blendedColor);

            IntPtr screenDC = GetDC(IntPtr.Zero);
            IntPtr bitmapDC = graphics.GetHdc();

            BitBlt(screenDC, 0, 0, screenWidth, screenHeight, bitmapDC, 0, 0, 0x00CC0020);

            graphics.ReleaseHdc(bitmapDC);
            ReleaseDC(IntPtr.Zero, screenDC);

            Thread.Sleep(delay);
        }
    }

    private static Color BlendColors(Color color1, Color color2, float blend)
    {
        int red = (int)(color1.R * (1 - blend) + color2.R * blend);
        int green = (int)(color1.G * (1 - blend) + color2.G * blend);
        int blue = (int)(color1.B * (1 - blend) + color2.B * blend);
        int alpha = (int)(color1.A * (1 - blend) + color2.A * blend);

        return Color.FromArgb(alpha, red, green, blue);
    }
}
'@

[Win32]::FadeToBlack()
