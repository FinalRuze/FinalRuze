$source = @"
using System;
using System.Runtime.InteropServices;
using System.Threading;

public static class Win32
{
    [DllImport("user32.dll")]
    static extern int GetSystemMetrics(int smIndex);

    [DllImport("user32.dll")]
    static extern IntPtr GetDC(IntPtr hWnd);

    [DllImport("gdi32.dll")]
    static extern bool BitBlt(IntPtr hdcDest, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hdcSrc, int nXSrc, int nYSrc, uint dwRop);

    [DllImport("user32.dll")]
    static extern bool SetProcessDPIAware();

    [DllImport("gdi32.dll")]
    static extern IntPtr CreateCompatibleDC(IntPtr hdc);

    [DllImport("gdi32.dll")]
    static extern IntPtr CreateCompatibleBitmap(IntPtr hdc, int nWidth, int nHeight);

    [DllImport("gdi32.dll")]
    static extern IntPtr SelectObject(IntPtr hdc, IntPtr hObject);

    [DllImport("gdi32.dll")]
    static extern bool DeleteObject(IntPtr hObject);

    [DllImport("gdi32.dll")]
    static extern bool DeleteDC(IntPtr hdc);

    [DllImport("gdi32.dll")]
    static extern bool StretchBlt(IntPtr hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, IntPtr hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, uint dwRop);

    [DllImport("gdi32.dll")]
    static extern int SetTextColor(IntPtr hdc, int crColor);

    [DllImport("gdi32.dll")]
    static extern int SetBkColor(IntPtr hdc, int crColor);

    public static void PIP()
    {
        SetProcessDPIAware();
        int cx = GetSystemMetrics(0);
        int cy = GetSystemMetrics(1);

        IntPtr hdc = GetDC(IntPtr.Zero);

        // Create a black brush
        IntPtr hBrush = CreateSolidBrush(0x000000);

        // Get the screen dimensions
        int screenWidth = GetSystemMetrics(0);
        int screenHeight = GetSystemMetrics(1);

        // Create a black rectangle the size of the screen
        Rectangle rect = new Rectangle(0, 0, screenWidth, screenHeight);

        // Create a compatible DC and bitmap for blurring effect
        IntPtr hdcCompatible = CreateCompatibleDC(hdc);
        IntPtr hBitmap = CreateCompatibleBitmap(hdc, screenWidth, screenHeight);
        IntPtr hOldBitmap = SelectObject(hdcCompatible, hBitmap);

        while (true)
        {
            // Slowly turn the screen pitch black
            for (int i = 0; i < 256; i++)
            {
                // Set the brush color to gradually darken the screen
                int brushColor = (i << 16) | (i << 8) | i;
                SetTextColor(hdc, brushColor);
                SetBkColor(hdc, brushColor);

                // Paint the black rectangle onto the screen
                BitBlt(hdc, rect.Left, rect.Top, rect.Width, rect.Height, hdc, rect.Left, rect.Top, 0x00);

                // Blur the screen by copying the black rectangle with reduced opacity
                StretchBlt(hdc, rect.Left, rect.Top, rect.Width, rect.Height, hdcCompatible, rect.Left, rect.Top, rect.Width, rect.Height, 0x00CC0020);

                // Pause for a short duration to create the fading and blurring effect
                Thread.Sleep(20);
            }
        }

        // Cleanup
        SelectObject(hdcCompatible, hOldBitmap);
        DeleteObject(hBitmap);
        DeleteDC(hdcCompatible);
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct Rectangle
    {
        public int Left;
        public int Top;
        public int Width;
        public int Height;

        public Rectangle(int left, int top, int width, int height)
        {
            Left = left;
            Top = top;
            Width = width;
            Height = height;
        }
    }
}
"@

Add-Type -TypeDefinition $source -Language CSharp
[Win32]::PIP()
