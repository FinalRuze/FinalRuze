$source = @"
using System;
using System.Runtime.InteropServices;
using System.Threading;

public static class Win32
{
    [DllImport("user32.dll")]
    static extern int GetSystemMetrics(int smIndex);

    [DllImport("user32.dll")]
    static extern IntPtr GetDC(IntPtr hWnd);

    [DllImport("gdi32.dll")]
    static extern bool StretchBlt(IntPtr hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, IntPtr hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, int dwRop);

    [DllImport("user32.dll", SetLastError = true)]
    static extern bool SetProcessDPIAware();

    [DllImport("gdi32.dll")]
    static extern IntPtr CreatePen(int fnPenStyle, int nWidth, uint crColor);

    [DllImport("gdi32.dll")]
    static extern IntPtr SelectObject(IntPtr hdc, IntPtr hgdiobj);

    [DllImport("gdi32.dll")]
    static extern bool Rectangle(IntPtr hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect);

    [DllImport("gdi32.dll")]
    static extern bool Polygon(IntPtr hdc, int[] points, int nCount);

    public static void ReversePIP()
    {
        SetProcessDPIAware();
        int cx = GetSystemMetrics(0);
        int cy = GetSystemMetrics(1);

        while (true)
        {
            Thread.Sleep(800);
            IntPtr hdc = GetDC(IntPtr.Zero);

            // Original effect - StretchBlt
            StretchBlt(hdc, 0, 0, cx, cy, hdc, 50, 50, cx - 100, cy - 100, 0x00CC0020);

            // Additional effect 1 - Drawing rectangles
            IntPtr pen = CreatePen(0, 5, 0x000000); // Black color pen
            IntPtr oldPen = SelectObject(hdc, pen);
            
            Rectangle(hdc, 100, 100, cx - 100, cy - 100);
            Rectangle(hdc, 200, 200, cx - 200, cy - 200);
            
            SelectObject(hdc, oldPen);

            // Additional effect 2 - Drawing multiple hexagons to fill the screen
            int hexagonSize = 100;
            int hexagonMargin = 20;
            int hexagonRowCount = (cy - 2 * hexagonMargin) / (hexagonSize + hexagonMargin);
            int hexagonColumnCount = (cx - 2 * hexagonMargin) / (hexagonSize + hexagonMargin);
            int totalHexagons = hexagonRowCount * hexagonColumnCount;

            int[] hexagonXPositions = new int[totalHexagons];
            int[] hexagonYPositions = new int[totalHexagons];

            int startX = hexagonMargin;
            int startY = hexagonMargin;

            for (int i = 0; i < totalHexagons; i++)
            {
                int row = i / hexagonColumnCount;
                int column = i % hexagonColumnCount;

                int hexagonX = startX + column * (hexagonSize + hexagonMargin);
                int hexagonY = startY + row * (hexagonSize + hexagonMargin);

                hexagonXPositions[i] = hexagonX;
                hexagonYPositions[i] = hexagonY;

                int[] hexagonPoints = new int[]
                {
                    hexagonX + hexagonSize / 2, hexagonY,
                    hexagonX + hexagonSize, hexagonY + hexagonSize / 3,
                    hexagonX + hexagonSize, hexagonY + 2 * hexagonSize / 3,
                    hexagonX + hexagonSize / 2, hexagonY + hexagonSize,
                    hexagonX, hexagonY + 2 * hexagonSize / 3,
                    hexagonX, hexagonY + hexagonSize / 3
                };
                Polygon(hdc, hexagonPoints, hexagonPoints.Length / 2);
            }
        }
    }
}
"@
Add-Type -TypeDefinition $source -Language CSharp
[Win32]::ReversePIP()
