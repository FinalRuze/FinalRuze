Add-Type -TypeDefinition @"
using System;
using System.Runtime.InteropServices;
using System.Threading;

public static class Win32
{
    [DllImport("user32.dll")]
    static extern int GetSystemMetrics(int smIndex);

    [DllImport("user32.dll")]
    static extern IntPtr GetDC(IntPtr hWnd);

    [DllImport("gdi32.dll")]
    static extern bool StretchBlt(IntPtr hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, IntPtr hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, int dwRop);

    [DllImport("user32.dll", SetLastError = true)]
    static extern bool SetProcessDPIAware();

    public static void ReversePIP()
    {
        SetProcessDPIAware();
        int cx = GetSystemMetrics(0);
        int cy = GetSystemMetrics(1);

        while (true)
        {
            IntPtr hdc = GetDC(IntPtr.Zero);

            // Custom Graphic Effect: Blur
            int blurRadius = 5;
            int width = cx - 100;
            int height = cy - 100;

            byte[] pixels = new byte[width * height * 4];
            Marshal.Copy(hdc, pixels, 0, pixels.Length);

            for (int x = 0; x < width; x++)
            {
                for (int y = 0; y < height; y++)
                {
                    int startX = Math.Max(x - blurRadius, 0);
                    int startY = Math.Max(y - blurRadius, 0);
                    int endX = Math.Min(x + blurRadius, width - 1);
                    int endY = Math.Min(y + blurRadius, height - 1);

                    int sumRed = 0;
                    int sumGreen = 0;
                    int sumBlue = 0;
                    int pixelCount = 0;

                    for (int px = startX; px <= endX; px++)
                    {
                        for (int py = startY; py <= endY; py++)
                        {
                            int pixelIndex = (px + py * width) * 4;

                            sumRed += pixels[pixelIndex + 2];
                            sumGreen += pixels[pixelIndex + 1];
                            sumBlue += pixels[pixelIndex];
                            pixelCount++;
                        }
                    }

                    int destPixelIndex = (x + y * width) * 4;

                    pixels[destPixelIndex] = (byte)(sumBlue / pixelCount);
                    pixels[destPixelIndex + 1] = (byte)(sumGreen / pixelCount);
                    pixels[destPixelIndex + 2] = (byte)(sumRed / pixelCount);
                }
            }

            Marshal.Copy(pixels, 0, hdc, pixels.Length);
            Thread.Sleep(800);
        }
    }
}
"@

$thread = [System.Threading.Thread]::new([Win32], "ReversePIP")
$thread.IsBackground = $true
$thread.Start()

# Optionally, you can wait for a key press to stop the script.
# Write-Host "Press any key to stop..."
# $null = $host.UI.RawUI.ReadKey("NoEcho,IncludeKeyUp")
# $thread.Abort()
