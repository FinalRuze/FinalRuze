$source = @"
using System;
using System.Runtime.InteropServices;
using System.Threading;

public static class Win32
{
    [DllImport("user32.dll")]
    static extern int GetSystemMetrics(int smIndex);

    [DllImport("user32.dll")]
    static extern IntPtr GetDC(IntPtr hWnd);

    [DllImport("gdi32.dll")]
    static extern bool BitBlt(IntPtr hdcDest, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hdcSrc, int nXSrc, int nYSrc, uint dwRop);

    [DllImport("user32.dll")]
    static extern bool SetProcessDPIAware();

    [DllImport("gdi32.dll")]
    static extern IntPtr CreateSolidBrush(int crColor);

    [DllImport("gdi32.dll")]
    static extern int SetTextColor(IntPtr hdc, int crColor);

    [DllImport("gdi32.dll")]
    static extern int SetBkColor(IntPtr hdc, int crColor);

    [DllImport("gdi32.dll")]
    static extern IntPtr SelectObject(IntPtr hdc, IntPtr hgdiobj);

    [DllImport("gdi32.dll")]
    static extern bool TextOut(IntPtr hdc, int nXStart, int nYStart, string lpString, int cchString);

    [DllImport("gdi32.dll")]
    static extern IntPtr CreateFont(int nHeight, int nWidth, int nEscapement, int nOrientation, int fnWeight, uint fdwItalic, uint fdwUnderline, uint fdwStrikeOut, uint fdwCharSet, uint fdwOutputPrecision, uint fdwClipPrecision, uint fdwQuality, uint fdwPitchAndFamily, string lpszFace);

    [DllImport("gdi32.dll")]
    static extern bool DeleteObject(IntPtr hObject);

    public static void PIP()
    {
        SetProcessDPIAware();
        int cx = GetSystemMetrics(0);
        int cy = GetSystemMetrics(1);

        IntPtr hdc = GetDC(IntPtr.Zero);

        // Create a black brush
        IntPtr hBrush = CreateSolidBrush(0x000000);

        // Create a white font
        IntPtr hFont = CreateFont(16, 0, 0, 0, 400, 0, 0, 0, 0, 0, 0, 0, 0, "Arial");

        // Select the white font
        SelectObject(hdc, hFont);

        // Get the screen dimensions
        int screenWidth = GetSystemMetrics(0);
        int screenHeight = GetSystemMetrics(1);

        // Create a black rectangle the size of the screen
        Rectangle rect = new Rectangle(0, 0, screenWidth, screenHeight);

        Random rand = new Random();
        string message = "Your Message Here";

        while (true)
        {
            // Slowly turn the screen pitch black
            for (int i = 0; i < 256; i++)
            {
                // Set the brush color to gradually darken the screen
                int brushColor = (i << 16) | (i << 8) | i;
                SetTextColor(hdc, brushColor);
                SetBkColor(hdc, brushColor);

                // Paint the black rectangle onto the screen
                BitBlt(hdc, rect.Left, rect.Top, rect.Width, rect.Height, hdc, rect.Left, rect.Top, 0x00);

                // Pause for a short duration to create the fading effect
                Thread.Sleep(20);
            }

            // Apply the melting effect
            int meltX = rand.Next(rect.Width);
            int meltY = rand.Next(rect.Height);
            int meltWidth = rand.Next(rect.Width - meltX);
            int meltHeight = rand.Next(rect.Height - meltY);

            for (int j = 0; j < 50; j++)
            {
                int meltOffsetX = rand.Next(10) - 5;
                int meltOffsetY = rand.Next(10) - 5;

                // Paint a melted region onto the screen
                BitBlt(hdc, meltX + meltOffsetX, meltY + meltOffsetY, meltWidth, meltHeight, hdc, meltX, meltY, 0x00);

                // Pause for a short duration to create the melting effect
                Thread.Sleep(20);
            }

            // Display the message all over the screen
            for (int x = 0; x < rect.Width; x += 50)
            {
                for (int y = 0; y < rect.Height; y += 50)
                {
                    // Set the position for the text
                    int textX = x + rand.Next(40);
                    int textY = y + rand.Next(40);

                    // Display the message in white text
                    TextOut(hdc, textX, textY, message, message.Length);

                    // Pause for a short duration to create the effect
                    Thread.Sleep(10);
                }
            }
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct Rectangle
    {
        public int Left;
        public int Top;
        public int Width;
        public int Height;

        public Rectangle(int left, int top, int width, int height)
        {
            Left = left;
            Top = top;
            Width = width;
            Height = height;
        }
    }
}
"@

Add-Type -TypeDefinition $source -Language CSharp
[Win32]::PIP()
