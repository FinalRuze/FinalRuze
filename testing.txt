$source = @"
using System;
using System.Runtime.InteropServices;
using System.Threading;

public static class Win32
{
    [DllImport("user32.dll")]
    static extern int GetSystemMetrics(int smIndex);

    [DllImport("user32.dll")]
    static extern IntPtr GetDC(IntPtr hWnd);

    [DllImport("gdi32.dll")]
    static extern bool BitBlt(IntPtr hdcDest, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hdcSrc, int nXSrc, int nYSrc, uint dwRop);

    [DllImport("user32.dll", SetLastError = true)]
    static extern bool SetProcessDPIAware();

    public static void BleedingEffect()
    {
        SetProcessDPIAware();
        int cx = GetSystemMetrics(0);
        int cy = GetSystemMetrics(1);

        while (true)
        {
            Thread.Sleep(800);
            IntPtr hdc = GetDC(IntPtr.Zero);

            // Create a temporary bitmap
            IntPtr hdcTemp = GetDC(IntPtr.Zero);
            IntPtr hBitmap = IntPtr.Zero;
            IntPtr hOldBitmap = IntPtr.Zero;

            try
            {
                hBitmap = CreateCompatibleBitmap(hdc, cx, cy);
                hOldBitmap = SelectObject(hdcTemp, hBitmap);

                // Draw a semi-transparent red rectangle on the temporary bitmap
                using (var g = Graphics.FromHdc(hdcTemp))
                {
                    g.FillRectangle(new SolidBrush(Color.FromArgb(128, Color.Red)), 0, 0, cx, cy);
                }

                // Copy the temporary bitmap to the screen
                BitBlt(hdc, 0, 0, cx, cy, hdcTemp, 0, 0, 0xCC0020);
            }
            finally
            {
                // Clean up resources
                if (hdcTemp != IntPtr.Zero)
                {
                    SelectObject(hdcTemp, hOldBitmap);
                    DeleteObject(hBitmap);
                    ReleaseDC(IntPtr.Zero, hdcTemp);
                }
            }

            // Release the screen's device context
            ReleaseDC(IntPtr.Zero, hdc);
        }
    }
}
"@

Add-Type -TypeDefinition $source -Language CSharp
[Win32]::BleedingEffect()
