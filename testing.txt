$source= @"
using System;
using System.Runtime.InteropServices;
using System.Threading;

public static class Win32
{
    [DllImport("user32.dll")]
    static extern int GetSystemMetrics(int smIndex);

    [DllImport("user32.dll")]
    static extern IntPtr GetDC(IntPtr hWnd);

    [DllImport("gdi32.dll")]
    static extern bool StretchBlt(IntPtr hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, IntPtr hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, int dwRop);

    [DllImport("user32.dll", SetLastError = true)]
    static extern bool SetProcessDPIAware();

    [DllImport("gdi32.dll")]
    static extern IntPtr CreateCompatibleDC(IntPtr hdc);

    [DllImport("gdi32.dll")]
    static extern IntPtr CreateCompatibleBitmap(IntPtr hdc, int nWidth, int nHeight);

    [DllImport("gdi32.dll")]
    static extern IntPtr SelectObject(IntPtr hdc, IntPtr hObject);

    [DllImport("gdi32.dll")]
    static extern bool BitBlt(IntPtr hdcDest, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hdcSrc, int nXSrc, int nYSrc, uint dwRop);

    [DllImport("gdi32.dll")]
    static extern bool DeleteObject(IntPtr hObject);

    public static void PIP()
    {
        SetProcessDPIAware();
        int cx = GetSystemMetrics(0);
        int cy = GetSystemMetrics(1);

        IntPtr hdc = GetDC(IntPtr.Zero);
        IntPtr memDC = CreateCompatibleDC(hdc);
        IntPtr bmp = CreateCompatibleBitmap(hdc, cx, cy);
        IntPtr oldBmp = SelectObject(memDC, bmp);

        using (Graphics g = Graphics.FromHdc(memDC))
        {
            g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
            g.Clear(Color.Black);

            Color bloodColor = Color.FromArgb(128, 0, 0); // Customize the blood color as needed

            while (true)
            {
                for (int alpha = 0; alpha <= 128; alpha += 2) // Adjust the bleeding speed by changing the increment value
                {
                    Thread.Sleep(50); // Adjust the delay between each frame to control the bleeding effect

                    g.Clear(Color.Black);
                    using (Brush bloodBrush = new SolidBrush(Color.FromArgb(alpha, bloodColor)))
                    {
                        g.FillRectangle(bloodBrush, 0, 0, cx, cy);
                    }

                    BitBlt(hdc, 0, 0, cx, cy, memDC, 0, 0, 0xCC0020);
                }
            }
        }

        SelectObject(memDC, oldBmp);
        DeleteObject(bmp);
        DeleteDC(memDC);
    }
}
"@

Add-Type -TypeDefinition $source -Language CSharp
[Win32]::PIP()
