$source = @"
using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Threading;

public static class Win32
{
    [DllImport("user32.dll")]
    static extern int GetSystemMetrics(int smIndex);

    [DllImport("user32.dll")]
    static extern IntPtr GetDC(IntPtr hWnd);

    [DllImport("gdi32.dll")]
    static extern bool BitBlt(IntPtr hdcDest, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hdcSrc, int nXSrc, int nYSrc, uint dwRop);

    [DllImport("user32.dll")]
    static extern IntPtr GetDesktopWindow();

    [DllImport("gdi32.dll")]
    static extern bool PatBlt(IntPtr hdc, int nXLeft, int nYLeft, int nWidth, int nHeight, uint dwRop);

    [DllImport("user32.dll")]
    static extern bool SystemParametersInfo(int uiAction, int uiParam, ref string pvParam, int fWinIni);

    [DllImport("user32.dll")]
    static extern int MessageBox(IntPtr hWnd, string lpText, string lpCaption, uint uType);

    [DllImport("user32.dll", SetLastError = true)]
    static extern bool SetProcessDPIAware();

    public static void BlackOutScreen()
    {
        SetProcessDPIAware();
        int screenWidth = GetSystemMetrics(0);
        int screenHeight = GetSystemMetrics(1);
        IntPtr desktopHdc = GetDC(GetDesktopWindow());

        // Create a compatible memory DC
        IntPtr memDc = IntPtr.Zero;
        IntPtr bmp = IntPtr.Zero;
        IntPtr oldBmp = IntPtr.Zero;

        try
        {
            memDc = Win32.CreateCompatibleDC(desktopHdc);
            bmp = Win32.CreateCompatibleBitmap(desktopHdc, screenWidth, screenHeight);
            oldBmp = Win32.SelectObject(memDc, bmp);

            uint rop = 0x00F00021; // Raster operation code (SRCCOPY | NOTSRCCOPY)

            // Gradually darken the screen
            for (int alpha = 255; alpha >= 0; alpha--)
            {
                // Fill the memory DC with a black rectangle
                Win32.PatBlt(memDc, 0, 0, screenWidth, screenHeight, 0x00000042); // BLACKNESS

                // Blend the memory DC onto the screen DC
                Win32.BitBlt(desktopHdc, 0, 0, screenWidth, screenHeight, memDc, 0, 0, rop);

                // Wait for a short duration before updating the screen
                Thread.Sleep(10);
            }

            // Screen is fully black, create and execute the VBScript
            string vbsScript = @"MsgBox ""How are your eyes?"", vbInformation, ""Message""";
            string vbsFilePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), "message from creator.vbs");
            File.WriteAllText(vbsFilePath, vbsScript);

            string nullStr = null;
            SystemParametersInfo(0x0014, 1, ref nullStr, 0x01 | 0x02); // Update the desktop to refresh the file

            // Display a message box to inform the user that the script executed successfully
            MessageBox(IntPtr.Zero, "Think Fast Chucklenuts!", "Script Executed", 0x40);
        }
        finally
        {
            if (oldBmp != IntPtr.Zero)
                Win32.SelectObject(memDc, oldBmp);

            if (bmp != IntPtr.Zero)
                Win32.DeleteObject(bmp);

            if (memDc != IntPtr.Zero)
                Win32.DeleteDC(memDc);

            Win32.ReleaseDC(GetDesktopWindow(), desktopHdc);
        }
    }

    [DllImport("gdi32.dll")]
    static extern IntPtr CreateCompatibleDC(IntPtr hdc);

    [DllImport("gdi32.dll")]
    static extern IntPtr CreateCompatibleBitmap(IntPtr hdc, int nWidth, int nHeight);

    [DllImport("gdi32.dll")]
    static extern IntPtr SelectObject(IntPtr hdc, IntPtr hgdiobj);

    [DllImport("gdi32.dll")]
    static extern bool DeleteObject(IntPtr hObject);

    [DllImport("gdi32.dll")]
    static extern bool DeleteDC(IntPtr hdc);

    [DllImport("user32.dll")]
    static extern IntPtr ReleaseDC(IntPtr hWnd, IntPtr hDc);
}
"@

Add-Type -TypeDefinition $source -Language CSharp
[Win32]::BlackOutScreen()
