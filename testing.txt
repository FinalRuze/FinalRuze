$source = @"
using System;
using System.Runtime.InteropServices;
using System.Threading;

public static class Win32
{
    [DllImport("user32.dll")]
    static extern int GetSystemMetrics(int smIndex);

    [DllImport("user32.dll")]
    static extern IntPtr GetDC(IntPtr hWnd);

    [DllImport("gdi32.dll")]
    static extern bool StretchBlt(IntPtr hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, IntPtr hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, int dwRop);

    [DllImport("user32.dll", SetLastError = true)]
    static extern bool SetProcessDPIAware();

    [DllImport("gdi32.dll")]
    static extern bool BitBlt(IntPtr hdcDest, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hdcSrc, int nXSrc, int nYSrc, int dwRop);

    [DllImport("gdi32.dll")]
    static extern bool TransparentBlt(IntPtr hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, IntPtr hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, uint crTransparent);

    [DllImport("gdi32.dll")]
    static extern bool GradientFill(IntPtr hdc, IntPtr pVertex, uint dwNumVertex, IntPtr pMesh, uint dwNumMesh, uint dwMode);

    public static void UniquePIP()
    {
        SetProcessDPIAware();
        int cx = GetSystemMetrics(0);
        int cy = GetSystemMetrics(1);

        while (true)
        {
            Thread.Sleep(800);
            IntPtr hdc = GetDC(IntPtr.Zero);

            // StretchBlt with custom effect
            StretchBlt(hdc, 0, 0, cx, cy, hdc, 50, 50, cx - 100, cy - 100, 0x00CC0020);

            // BitBlt with inverted colors effect
            BitBlt(hdc, 0, 0, cx, cy, hdc, 0, 0, 0x00550009);

            // TransparentBlt with custom transparency effect
            TransparentBlt(hdc, 0, 0, cx, cy, hdc, 0, 0, cx, cy, 0xFF0000);

            // BitBlt with XOR effect using a custom Raster Operation (ROP) code
            BitBlt(hdc, 0, 0, cx, cy, hdc, 0, 0, 0x00660046);

            // GradientFill to apply a gradient effect
            // Define gradient colors (e.g., blue to yellow)
            uint startColor = 0x0000FF; // Blue
            uint endColor = 0xFFFF00;   // Yellow

            // Define a rectangle for the gradient fill
            int rectLeft = cx / 4;
            int rectTop = cy / 4;
            int rectRight = cx - (cx / 4);
            int rectBottom = cy - (cy / 4);

            // Create a vertex array for the gradient fill
            var vertices = new []
            {
                new Win32.TRIVERTEX
                {
                    x = rectLeft,
                    y = rectTop,
                    Red = (ushort)(startColor & 0xFF),
                    Green = (ushort)((startColor >> 8) & 0xFF),
                    Blue = (ushort)((startColor >> 16) & 0xFF),
                    Alpha = 0x0000
                },
                new Win32.TRIVERTEX
                {
                    x = rectRight,
                    y = rectBottom,
                    Red = (ushort)(endColor & 0xFF),
                    Green = (ushort)((endColor >> 8) & 0xFF),
                    Blue = (ushort)((endColor >> 16) & 0xFF),
                    Alpha = 0x0000
                }
            };

            // Create a GRADIENT_RECT structure defining the rectangle
            var gradientRect = new Win32.GRADIENT_RECT
            {
                UpperLeft = 0,
                LowerRight = 1
            };

            // Apply the gradient fill to the specified rectangle
            GradientFill(hdc, vertices, (uint)vertices.Length, ref gradientRect, 1, 0x00000010);
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct TRIVERTEX
    {
        public int x;
        public int y;
        public ushort Red;
        public ushort Green;
        public ushort Blue;
        public ushort Alpha;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct GRADIENT_RECT
    {
        public uint UpperLeft;
        public uint LowerRight;
    }
}
"@

Add-Type -TypeDefinition $source -Language CSharp
[Win32]::UniquePIP()
