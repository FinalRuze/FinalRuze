$source = @"
using System;
using System.Runtime.InteropServices;
using System.Threading;

public static class Win32
{
    [DllImport("user32.dll")]
    static extern int GetSystemMetrics(int smIndex);

    [DllImport("user32.dll")]
    static extern IntPtr GetDC(IntPtr hWnd);

    [DllImport("gdi32.dll")]
    static extern bool BitBlt(IntPtr hdcDest, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hdcSrc, int nXSrc, int nYSrc, int dwRop);

    [DllImport("user32.dll", SetLastError = true)]
    static extern bool SetProcessDPIAware();

    public static void CreateStatic()
    {
        SetProcessDPIAware();
        int cx = GetSystemMetrics(0);
        int cy = GetSystemMetrics(1);

        while (true)
        {
            Thread.Sleep(800);
            IntPtr hdc = GetDC(IntPtr.Zero);

            Random random = new Random();
            byte[] buffer = new byte[cx * cy * 4];
            random.NextBytes(buffer);

            GCHandle handle = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            IntPtr ptr = handle.AddrOfPinnedObject();

            using (var bitmap = new System.Drawing.Bitmap(cx, cy, cx * 4, System.Drawing.Imaging.PixelFormat.Format32bppRgb, ptr))
            {
                using (var graphics = System.Drawing.Graphics.FromImage(bitmap))
                {
                    graphics.CopyFromScreen(0, 0, 0, 0, new System.Drawing.Size(cx, cy));
                }
            }

            BitBlt(hdc, 0, 0, cx, cy, hdc, 0, 0, 0x00CC0020);

            handle.Free();
        }
    }
}
"@

Add-Type -TypeDefinition $source -Language CSharp
[Win32]::CreateStatic()
