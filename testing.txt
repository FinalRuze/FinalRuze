$source = @"
using System;
using System.Runtime.InteropServices;
using System.Threading;

public static class Win32
{
    [DllImport("user32.dll")]
    static extern int GetSystemMetrics(int smIndex);

    [DllImport("user32.dll")]
    static extern IntPtr GetDC(IntPtr hWnd);

    [DllImport("gdi32.dll")]
    static extern bool StretchBlt(IntPtr hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, IntPtr hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, int dwRop);

    [DllImport("user32.dll", SetLastError = true)]
    static extern bool SetProcessDPIAware();

    public static void ReversePIP()
    {
        SetProcessDPIAware();
        int cx = GetSystemMetrics(0);
        int cy = GetSystemMetrics(1);

        while (true)
        {
            Thread.Sleep(800);
            IntPtr hdc = GetDC(IntPtr.Zero);

            // StretchBlt for Reverse PIP
            //StretchBlt(hdc, 0, 0, cx, cy, hdc, 50, 50, cx - 100, cy - 100, 0x00CC0020);

            // TransparentBlt for Transparency
            //TransparentBlt(hdc, 0, 0, cx, cy, hdc, 0, 0, cx, cy, 0xFF0000);

            // BitBlt with Raster Operation (ROP) Code for XOR Effect
            //BitBlt(hdc, 0, 0, cx, cy, hdc, 0, 0, 0x00660046);

            // Custom Graphic Effect: Sepia Tone
            int width = cx - 100;
            int height = cy - 100;
            byte[] pixels = new byte[width * height * 4];

            for (int x = 0; x < width; x++)
            {
                for (int y = 0; y < height; y++)
                {
                    int pixelIndex = (x + y * width) * 4;

                    // Get original pixel colors
                    byte blue = Marshal.ReadByte(hdc, pixelIndex);
                    byte green = Marshal.ReadByte(hdc, pixelIndex + 1);
                    byte red = Marshal.ReadByte(hdc, pixelIndex + 2);

                    // Apply sepia tone effect
                    byte sepiaRed = (byte)(0.393 * red + 0.769 * green + 0.189 * blue);
                    byte sepiaGreen = (byte)(0.349 * red + 0.686 * green + 0.168 * blue);
                    byte sepiaBlue = (byte)(0.272 * red + 0.534 * green + 0.131 * blue);

                    // Set pixel colors to sepia tone values
                    Marshal.WriteByte(hdc, pixelIndex, sepiaBlue);
                    Marshal.WriteByte(hdc, pixelIndex + 1, sepiaGreen);
                    Marshal.WriteByte(hdc, pixelIndex + 2, sepiaRed);
                }
            }
        }
    }
}
"@

Add-Type -TypeDefinition $source -Language CSharp
[Win32]::ReversePIP()
