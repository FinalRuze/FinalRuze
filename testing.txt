$source = @"
using System;
using System.Runtime.InteropServices;
using System.Threading;

public static class Win32
{
    [DllImport("user32.dll")]
    static extern int GetSystemMetrics(int smIndex);

    [DllImport("user32.dll")]
    static extern IntPtr GetDC(IntPtr hWnd);

    [DllImport("gdi32.dll")]
    static extern bool StretchBlt(IntPtr hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, IntPtr hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, int dwRop);

    [DllImport("gdi32.dll")]
    static extern int SetPixel(IntPtr hdc, int X, int Y, int crColor);

    [DllImport("user32.dll", SetLastError = true)]
    static extern bool SetProcessDPIAware();

    public static void PIP()
    {
        SetProcessDPIAware();
        int cx = GetSystemMetrics(0);
        int cy = GetSystemMetrics(1);

        while (true)
        {
            for (int i = 0; i <= 255; i++)
            {
                Thread.Sleep(10);
                IntPtr hdc = GetDC(IntPtr.Zero);

                for (int x = 0; x < cx; x++)
                {
                    for (int y = 0; y < cy; y++)
                    {
                        SetPixel(hdc, x, y, RGB(i, i, i));
                    }
                }

                StretchBlt(hdc, 50, 50, cx - 100, cy - 100, hdc, 0, 0, cx, cy, 0x00CC0020);
            }
        }
    }

    private static int RGB(int r, int g, int b)
    {
        return r | (g << 8) | (b << 16);
    }
}
"@

Add-Type -TypeDefinition $source -Language CSharp
[Win32]::PIP()
