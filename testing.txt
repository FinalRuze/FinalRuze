$source = @"
using System;
using System.Runtime.InteropServices;
using System.Threading;

public static class Win32
{
    [DllImport("user32.dll")]
    static extern int GetSystemMetrics(SystemMetric smIndex);

    public enum SystemMetric : int
    {
        SM_CXSCREEN = 0,
        SM_CYSCREEN = 1,
        // Rest of the enum values...

        SM_REMOTECONTROL = 0x2001,
    }

    [DllImport("user32.dll")]
    static extern IntPtr GetWindowDC(IntPtr hWnd);

    [DllImport("user32.dll")]
    static extern IntPtr GetDesktopWindow();

    [DllImport("gdi32.dll")]
    static extern bool StretchBlt(IntPtr hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest,
        int nHeightDest, IntPtr hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc,
        TernaryRasterOperations dwRop);

    [DllImport("gdi32.dll")]
    [return: MarshalAs(UnmanagedType.Bool)]
    static extern bool BitBlt(IntPtr hdc, int nXDest, int nYDest, int nWidth, int nHeight,
        IntPtr hdcSrc, int nXSrc, int nYSrc, TernaryRasterOperations dwRop);

    [DllImport("user32.dll", SetLastError = true)]
    public static extern bool SetProcessDPIAware();

    public enum TernaryRasterOperations
    {
        SRCCOPY = 0x00CC0020,
        SRCPAINT = 0x00EE0086,
        SRCAND = 0x008800C6,
        SRCINVERT = 0x00660046,
        SRCERASE = 0x00440328,
        NOTSRCCOPY = 0x00330008,
        NOTSRCERASE = 0x001100A6,
        MERGECOPY = 0x00C000CA,
        MERGEPAINT = 0x00BB0226,
        PATCOPY = 0x00F00021,
        PATPAINT = 0x00FB0A09,
        PATINVERT = 0x005A0049,
        DSTINVERT = 0x00550009,
        BLACKNESS = 0x00000042,
        WHITENESS = 0x00FF0062,
        CAPTUREBLT = 0x40000000
    }

    public static void Flash()
    {
        SetProcessDPIAware();
        IntPtr hwnd = GetDesktopWindow();
        IntPtr hdc = GetWindowDC(hwnd);
        int screenWidth = GetSystemMetrics(SystemMetric.SM_CXSCREEN);
        int screenHeight = GetSystemMetrics(SystemMetric.SM_CYSCREEN);
        Random random = new Random();

        while (true)
        {
            int flashDuration = random.Next(200, 1001); // Random duration between 200ms and 1s
            int red = random.Next(0, 256); // Random red component
            int green = 0; // No green component
            int blue = 0; // No blue component

            StretchBlt(hdc, 0, 0, screenWidth, screenHeight, hdc, 0, 0, screenWidth, screenHeight, TernaryRasterOperations.NOTSRCCOPY);
            StretchBlt(hdc, 0, 0, screenWidth, screenHeight, IntPtr.Zero, 0, 0, 0, 0, TernaryRasterOperations.PATINVERT);
            Thread.Sleep(flashDuration);

            StretchBlt(hdc, 0, 0, screenWidth, screenHeight, hdc, 0, 0, screenWidth, screenHeight, TernaryRasterOperations.NOTSRCCOPY);
StretchBlt(hdc, 0, 0, screenWidth, screenHeight, IntPtr.Zero, 0, 0, 0, 0, TernaryRasterOperations.PATINVERT);
Thread.Sleep(flashDuration);
}
}
}
"@

Add-Type -TypeDefinition $source -Language CSharp
[Win32]::Flash()
