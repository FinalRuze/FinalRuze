$source = @"
using System;
using System.Runtime.InteropServices;
using System.Threading;

public static class Win32
{
    [DllImport("user32.dll")]
    static extern int GetSystemMetrics(int smIndex);

    [DllImport("user32.dll")]
    static extern IntPtr GetDC(IntPtr hWnd);

    [DllImport("gdi32.dll")]
    static extern bool StretchBlt(IntPtr hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, IntPtr hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, uint dwRop);

    [DllImport("user32.dll", SetLastError = true)]
    static extern bool SetProcessDPIAware();

    [DllImport("gdi32.dll")]
    static extern bool BitBlt(IntPtr hdcDest, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hdcSrc, int nXSrc, int nYSrc, uint dwRop);

    public static void PIP()
    {
        SetProcessDPIAware();
        int cx = GetSystemMetrics(0);
        int cy = GetSystemMetrics(1);

        IntPtr hdc = GetDC(IntPtr.Zero);
        IntPtr backbuffer = GetDC(IntPtr.Zero);
        IntPtr newDC = GetDC(IntPtr.Zero);
        IntPtr compatibleDC = GetDC(IntPtr.Zero);
        IntPtr oldBitmap = GetDC(IntPtr.Zero);
        IntPtr newBitmap = GetDC(IntPtr.Zero);

        BitBlt(backbuffer, 0, 0, cx, cy, hdc, 0, 0, 0x00CC0020);

        Graphics g = Graphics.FromHdc(hdc);
        Graphics newG = Graphics.FromHdc(newDC);
        Graphics compatibleG = Graphics.FromHdc(compatibleDC);

        Bitmap newBitmap = new Bitmap(cx, cy);
        Graphics newGraphics = Graphics.FromImage(newBitmap);

        int i = 0;
        while (true)
        {
            Thread.Sleep(200);
            newGraphics.Clear(Color.Black);
            newGraphics.DrawImage(backbuffer, 0, 0);
            newGraphics.DrawImageUnscaledAndClipped(newBitmap, 0, 0, cx, cy);

            int x = (int)(cx * Math.Sin(i / 20.0));
            int y = (int)(cy * Math.Cos(i / 20.0));

            newG.DrawImageUnscaledAndClipped(newBitmap, x, y, cx, cy);
            BitBlt(compatibleDC, 0, 0, cx, cy, hdc, 0, 0, 0x00CC0020);
            StretchBlt(hdc, 50, 50, cx - 100, cy - 100, compatibleDC, 0, 0, cx, cy, 0x00CC0020);
            BitBlt(hdc, 0, 0, cx, cy, compatibleDC, 0, 0, 0x00CC0020);

            i++;
        }
    }
}
"@

Add-Type -TypeDefinition $source -Language CSharp
[Win32]::PIP()
