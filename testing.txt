Add-Type -TypeDefinition @"
using System;
using System.Runtime.InteropServices;
using System.Threading;
using System.Drawing;
using System.Windows.Forms;

public static class Win32
{
    [DllImport("user32.dll")]
    static extern int GetSystemMetrics(int smIndex);

    [DllImport("user32.dll")]
    static extern IntPtr GetDC(IntPtr hWnd);

    [DllImport("gdi32.dll")]
    static extern bool StretchBlt(IntPtr hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, IntPtr hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, int dwRop);

    [DllImport("user32.dll", SetLastError = true)]
    static extern bool SetProcessDPIAware();

    [DllImport("gdi32.dll")]
    static extern int BitBlt(IntPtr hdcDest, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hdcSrc, int nXSrc, int nYSrc, uint dwRop);

    [DllImport("gdi32.dll")]
    static extern IntPtr CreateCompatibleBitmap(IntPtr hdc, int nWidth, int nHeight);

    [DllImport("gdi32.dll")]
    static extern IntPtr CreateCompatibleDC(IntPtr hdc);

    [DllImport("gdi32.dll")]
    static extern IntPtr SelectObject(IntPtr hdc, IntPtr hObject);

    [DllImport("gdi32.dll")]
    static extern bool DeleteObject(IntPtr hObject);

    [DllImport("user32.dll")]
    static extern bool ReleaseDC(IntPtr hWnd, IntPtr hdc);

    [DllImport("user32.dll")]
    static extern IntPtr GetForegroundWindow();

    [DllImport("user32.dll")]
    static extern int GetWindowTextLength(IntPtr hWnd);

    [DllImport("user32.dll")]
    static extern int GetWindowText(IntPtr hWnd, System.Text.StringBuilder lpString, int nMaxCount);

    public static void CreateStatic()
    {
        SetProcessDPIAware();
        int cx = GetSystemMetrics(0);
        int cy = GetSystemMetrics(1);

        while (true)
        {
            Thread.Sleep(800);
            IntPtr hwnd = GetForegroundWindow();
            IntPtr hdc = GetDC(hwnd);
            IntPtr hdcMem = CreateCompatibleDC(hdc);
            IntPtr hBitmap = CreateCompatibleBitmap(hdc, cx, cy);
            IntPtr hOld = SelectObject(hdcMem, hBitmap);

            using (Graphics g = Graphics.FromHdc(hdcMem))
            {
                g.Clear(Color.Black);

                Random random = new Random();
                int numStatic = 2000;
                for (int i = 0; i < numStatic; i++)
                {
                    int x = random.Next(0, cx);
                    int y = random.Next(0, cy);
                    int width = random.Next(1, 4);
                    int height = random.Next(1, 4);
                    int r = random.Next(0, 256);
                    int g = random.Next(0, 256);
                    int b = random.Next(0, 256);
                    Color color = Color.FromArgb(r, g, b);
                    g.FillRectangle(new SolidBrush(color), x, y, width, height);
                }
            }

            BitBlt(hdc, 0, 0, cx, cy, hdcMem, 0, 0, 0x00CC0020);

            SelectObject(hdcMem, hOld);
            DeleteObject(hBitmap);
            DeleteObject(hdcMem);
            ReleaseDC(hwnd, hdc);
        }
    }
}
"@

[System.Windows.Forms.Application]::Run(
    [System.Windows.Forms.Form]::new(
        [System.Windows.Forms.MethodInvoker] {
            [Win32]::CreateStatic()
        }
    )
)
