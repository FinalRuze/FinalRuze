Add-Type -TypeDefinition @"
using System;
using System.Runtime.InteropServices;
using System.Threading;

public static class Win32
{
    [DllImport("user32.dll")]
    public static extern int GetSystemMetrics(int smIndex);

    [DllImport("user32.dll")]
    public static extern IntPtr GetDC(IntPtr hWnd);

    [DllImport("user32.dll", SetLastError = true)]
    public static extern bool SetProcessDPIAware();

    [DllImport("user32.dll")]
    public static extern IntPtr GetShellWindow();

    [DllImport("user32.dll")]
    public static extern int GetWindowText(IntPtr hWnd, System.Text.StringBuilder lpString, int nMaxCount);

    [DllImport("user32.dll")]
    public static extern bool SetWindowText(IntPtr hWnd, string lpString);

    [DllImport("user32.dll")]
    public static extern bool SystemParametersInfo(int uiAction, int uiParam, string pvParam, int fWinIni);

    [DllImport("user32.dll")]
    public static extern bool SetSystemCursor(IntPtr hCursor, uint id);

    [DllImport("user32.dll")]
    public static extern IntPtr LoadCursor(IntPtr hInstance, int lpCursorName);

    [DllImport("user32.dll")]
    public static extern bool EnumWindows(EnumWindowsProc lpEnumFunc, IntPtr lParam);

    [DllImport("user32.dll")]
    public static extern bool IsWindowVisible(IntPtr hWnd);

    [DllImport("user32.dll")]
    public static extern int GetClassName(IntPtr hWnd, System.Text.StringBuilder lpClassName, int nMaxCount);

    [DllImport("user32.dll")]
    public static extern bool SetWindowLong(IntPtr hWnd, int nIndex, int dwNewLong);

    [DllImport("user32.dll")]
    public static extern bool RedrawWindow(IntPtr hWnd, IntPtr lprcUpdate, IntPtr hrgnUpdate, uint flags);

    [DllImport("shell32.dll")]
    public static extern IntPtr ExtractAssociatedIcon(IntPtr hInst, string lpIconPath, out ushort lpiIcon);

    [DllImport("shell32.dll")]
    public static extern int SHChangeNotify(int eventId, uint flags, IntPtr item1, IntPtr item2);

    public delegate bool EnumWindowsProc(IntPtr hWnd, IntPtr lParam);

    public static void ChangeAppAndFileIcon()
    {
        SetProcessDPIAware();

        // Change icon of apps and files
        const string filePath = "C:\\Path\\To\\File.exe";
        ushort iconIndex;
        IntPtr hIcon = ExtractAssociatedIcon(IntPtr.Zero, filePath, out iconIndex);
        SHChangeNotify(0x8000000, 0x1000, IntPtr.Zero, IntPtr.Zero);
        SHChangeNotify(0x8000000, 0x0800, IntPtr.Zero, IntPtr.Zero);

        // Change cursor
        IntPtr hCursor = LoadCursor(IntPtr.Zero, 32512);
        SetSystemCursor(hCursor, 32512);

        // Modify open window appearance
        EnumWindows((hWnd, lParam) =>
        {
            if (IsWindowVisible(hWnd))
            {
                System.Text.StringBuilder classNameBuilder = new System.Text.StringBuilder(256);
                GetClassName(hWnd, classNameBuilder, classNameBuilder.Capacity);
                string className = classNameBuilder.ToString();

                // Modify window title
                System.Text.StringBuilder windowTitleBuilder = new System.Text.StringBuilder(256);
                GetWindowText(hWnd, windowTitleBuilder, windowTitleBuilder.Capacity);
                string windowTitle = windowTitleBuilder.ToString();

                // Update window title
                SetWindowText(hWnd, "Modified Title");

                // Modify window style to remove title bar
                const int GWL_STYLE = -16;
                const int WS_CAPTION = 0x00C00000;
                const int WS_SYSMENU = 0x00080000;
                const int WS_MINIMIZEBOX = 0x00020000;
                const int WS_MAXIMIZEBOX = 0x00010000;
                const int WS_BORDER = 0x00800000;

                int windowStyle = (int)GetWindowLong(hWnd, GWL_STYLE);
                windowStyle &= ~(WS_CAPTION | WS_SYSMENU | WS_MINIMIZEBOX | WS_MAXIMIZEBOX | WS_BORDER);
                SetWindowLong(hWnd, GWL_STYLE, windowStyle);

                // Redraw the window to reflect the changes
                RedrawWindow(hWnd, IntPtr.Zero, IntPtr.Zero, 0x0400);

                // Perform other modifications or effects on the open window as needed

                // Return true to continue enumerating windows
                return true;
            }

            // Return false to stop enumerating windows
            return false;
        }, IntPtr.Zero);

        // Wait indefinitely to keep the script running
        Thread.Sleep(Timeout.Infinite);
    }
}
"@

[Win32]::ChangeAppAndFileIcon()

