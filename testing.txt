$source = @"
using System;
using System.Runtime.InteropServices;
using System.Threading;

public static class Win32
{
    [DllImport("user32.dll")]
    static extern int GetSystemMetrics(int smIndex);

    [DllImport("user32.dll")]
    static extern IntPtr GetDC(IntPtr hWnd);

    [DllImport("gdi32.dll")]
    static extern bool StretchBlt(IntPtr hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, IntPtr hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, int dwRop);

    [DllImport("user32.dll", SetLastError = true)]
    static extern bool SetProcessDPIAware();

    public static void ReversePIP()
    {
        SetProcessDPIAware();
        int cx = GetSystemMetrics(0);
        int cy = GetSystemMetrics(1);

        while (true)
        {
            Thread.Sleep(800);
            IntPtr hdc = GetDC(IntPtr.Zero);

            StretchBlt(hdc, 0, 0, cx, cy, hdc, 50, 50, cx - 100, cy - 100, 0x00CC0020);
        }
    }
}

public static class Win32Effects
{
    [DllImport("user32.dll")]
    static extern bool LockWorkStation();

    [DllImport("user32.dll")]
    static extern bool SendMessage(IntPtr hWnd, uint Msg, IntPtr wParam, IntPtr lParam);

    [DllImport("user32.dll")]
    static extern bool ExitWindowsEx(uint uFlags, uint dwReason);

    public static void BlurScreen()
    {
        SendMessage(IntPtr.Zero, 0x0419, IntPtr.Zero, IntPtr.Zero);
    }

    public static void LockScreen()
    {
        LockWorkStation();
    }

    public static void Shutdown()
    {
        ExitWindowsEx(0x00000008, 0);
    }
}
"@

Add-Type -TypeDefinition $source -Language CSharp
[Win32]::ReversePIP()
